install.packages("blogdown")
library("blogdown", lib.loc="~/R/win-library/3.5")
new_site()
library("blogdown", lib.loc="~/R/win-library/3.5")
library("blogdown", lib.loc="~/R/win-library/3.5")
library("blogdown", lib.loc="~/R/win-library/3.5")
detach("package:blogdown", unload=TRUE)
library("blogdown", lib.loc="~/R/win-library/3.5")
library("maptools", lib.loc="~/R/win-library/3.5")
library("raster", lib.loc="~/R/win-library/3.5")
library("rgdal", lib.loc="~/R/win-library/3.5")
## Usually no need to set a
#setwd("C:/Users/Victoria Starnes/Documents/Bluff Lake DO site selection")
setwd("C:/Users/Victoria Starnes/Documents/GitHub/Bluff-Lake-Project/analysis/DO-Sampling") # SET WORKING DIRECTORY TO THE FOLDER ABOVE THIS ONE
## PULL KML DATA IN
kml.text <- readLines("_dat/Bluff Lake Draft 1.kml")
kml.text
coords <- data.frame(kml.text[51:116])
coords <- data.frame(do.call('rbind', strsplit(as.character(coords$kml.text.51.116.), ',', fixed = TRUE)))
str(coords)
coords$X1 <- as.numeric(as.character(coords$X1))
coords$X2 <- as.numeric(as.character(coords$X2))
coords$X3 <- as.numeric(as.character(coords$X3))
colnames(coords) <- c('x','y','z')
str(coords)
## SAVE COORDINATES TO CSV
write.table(coords, "_dat/poly_coordinates.csv", sep = ",", row.names = F)
library(sp)
xy <- cbind(coords$x, coords$y)
plot(xy, type = 'l')
xy.poly <- Polygon(xy)## MAKE A POLYGON
## NOW MAKE A POLYGONS OBJECT
## WE ONLY HAVE 1 POLYGON
bl<- Polygons(list(xy.poly), ID=1)
## HERE IS WHERE THE PROJECTION HAPPENS
bl <- SpatialPolygons(list(bl),
proj4string=CRS("+proj=longlat +datum=NAD83"))
plot(bl) ## THAT LOOKS MUCH BETTER
## NOW TRANSFORM TO UTM
## I PERSONALLY LIKE UTM B/C THE GRID IS 1 METER
bl_utm<-spTransform(bl,
CRS("+proj=utm +zone=16 +datum=NAD83"))
#making a grid
grid <- makegrid(bl, cellsize = 0.00001) # cellsize in map units!
# grid is a data.frame. To change it to a spatial data set we have to
grid <- SpatialPoints(grid, proj4string = CRS(proj4string(bl)))
grid <- grid[bl]
plot(bl)
plot(grid, pch = 1, add = T)
write.table(coords, "_dat/poly_grid.csv", sep = ",", row.names = F)
#making a grid
grid <- makegrid(bl, cellsize = 0.0001) # cellsize in map units!
# grid is a data.frame. To change it to a spatial data set we have to
grid <- SpatialPoints(grid, proj4string = CRS(proj4string(bl)))
grid <- grid[bl]
plot(bl)
plot(grid, pch = 1, add = T)
write.table(coords, "_dat/poly_grid.csv", sep = ",", row.names = F)
#making a grid
grid <- makegrid(bl, cellsize = 0.001) # cellsize in map units!
# grid is a data.frame. To change it to a spatial data set we have to
grid <- SpatialPoints(grid, proj4string = CRS(proj4string(bl)))
grid <- grid[bl]
plot(bl)
plot(grid, pch = 1, add = T)
#making a grid
grid <- makegrid(bl, cellsize = 0.0001) # cellsize in map units!
# grid is a data.frame. To change it to a spatial data set we have to
grid <- SpatialPoints(grid, proj4string = CRS(proj4string(bl)))
grid <- grid[bl]
plot(bl)
plot(grid, pch = 1, add = T)
write.table(coords, "_dat/poly_grid.csv", sep = ",", row.names = F)
dat<-read.csv("_dat/2019_6_13edt.csv")
plot(Decimal.Time~Temp,data=dat, main="Time vs. Temperature",
xlab="Temperature (C)",
ylab="Military Time",
type="n")
points(Decimal.Time~Temp,data=dat,
subset=Measurement.Number=="1",
col="red")
points(Decimal.Time~Temp,data=dat,
subset=Measurement.Number=="2",
col="blue")
points(Decimal.Time~Temp,data=dat,
subset=Measurement.Number=="3",
col="green")
points(Decimal.Time~Temp,data=dat,
subset=Measurement.Number=="4",
col="purple")
abline(lm(Decimal.Time~Temp, data=dat), col="red")
legend("bottomright",title="Sampling Times", legend=c("1", "2", "3", "4"), col=c("red", "blue", "green", "purple") , pch=1, cex=0.8, text.font=4)
lm(Decimal.Time~Temp, data=dat)
plot(Decimal.Time~DO,data=dat,  main="Time vs Dissolved Oxygen",
xlab="Dissolved Oxygen (mg/L)",
ylab="Military Time",
type="n")
points(Decimal.Time~DO,data=dat,
subset=Measurement.Number=="1",
col="red")
points(Decimal.Time~DO,data=dat,
subset=Measurement.Number=="2",
col="blue")
points(Decimal.Time~DO,data=dat,
subset=Measurement.Number=="3",
col="green")
points(Decimal.Time~DO,data=dat,
subset=Measurement.Number=="4",
col="purple")
abline(lm(Decimal.Time~DO, data=dat), col="red")
legend("bottomright",title="Sampling Times", legend=c("1", "2", "3", "4"), col=c("red", "blue", "green", "purple") , pch=1, cex=0.8, text.font=4)
lm(Decimal.Time~DO, data = dat)
plot(DO~Temp,data=dat, main="DO vs. Temperature",
xlab="Temperature (C)",
ylab="Dissolved Oxygen",
type="n")
points(DO~Temp,data=dat,
subset=Measurement.Number=="1",
col="red")
points(DO~Temp,data=dat,
subset=Measurement.Number=="2",
col="blue")
points(DO~Temp,data=dat,
subset=Measurement.Number=="3",
col="green")
points(DO~Temp,data=dat,
subset=Measurement.Number=="4",
col="purple")
abline(lm(DO~Temp, data=dat), col="red")
legend("bottomright",title="Sampling Times", legend=c("1", "2", "3", "4"), col=c("red", "blue", "green", "purple") , pch=1, cex=0.8, text.font=4)
lm(DO~Temp, data=dat)
boxplot(DO~Veg, data=dat, main="Dissolved Oxygen",xlab="Vegetation", ylab="DO (mg/L)")
boxplot(Turbidity~Veg, data=dat, main="Turbidity", xlab="Vegetation", ylab="Secchi Depth (cm)")
boxplot(Temp~Veg, data=dat, main="Temperature", xlab="Vegetation", ylab="Temperature (C)")
