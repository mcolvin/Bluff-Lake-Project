library(gstat)
library(sp)
setwd("C:/Users/Victoria Starnes/Documents/GitHub/Bluff-Lake-Project/_analysis/Depth-Mapping")
## READ IN COORINDATES AND DEPTHS
vals <- read.csv("_dat/Bathymetry/CombinedCorrected.csv")
## LOOK AT ELEVATION TRACK
plot(vals$ElevationBottom,ylim=c(-4,0));abline(h=0)
## ASSIGN LONGITUED AND LATITUDE AS X AND Y
## COORINDATES
coordinates(vals) = ~Longitude+Latitude
proj4string(vals) <- CRS("+proj=longlat +datum=WGS84")
## PROJECT TO UTM
vals_utm<- spTransform(vals, CRS("+proj=utm +zone=16 ellps=WGS84"))
write.csv(vals_utm, "depth_vals_utm.csv")
## PLOT THE COORDINATES
plot(vals_utm,axes=TRUE)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
yrange <- range(vals_utm@coords[,2])
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
xrange <- (xrange[1]+10, xrannge[2]+10)
xrange <- (xrange[1]+10, xrange[2]+10)
xrange <- (xrange[1]+10, xrange[2]+10)
xrange <- ((xrange[1]+10), (xrange[2]+10))
xrange <- xrange+10
xrange
yrang <-yrange+10
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-10, xrange[2]+10)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-10, xrange[2]+10)
yrange <- range(vals_utm@coords[,2])
yrang <- c(yrange[1]-10, yrange[2]+10)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-30, xrange[2]+30)
yrange <- range(vals_utm@coords[,2])
yrang <- c(yrange[1]-30, yrange[2]+30)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-50, xrange[2]+50)
yrange <- range(vals_utm@coords[,2])
yrang <- c(yrange[1]-50, yrange[2]+50)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-50, xrange[2]+50)
yrange <- range(vals_utm@coords[,2])
yrang <- c(yrange[1]-100, yrange[2]+100)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-50, xrange[2]+50)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-50, yrange[2]+50)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## INTERPOLATE THE SURFACE BY INVERSE DISTANCE WEIGHTING
xx<-idw(formula=ElevationBottom ~ 1,
locations=vals_utm, newdata=grd)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-60, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-60, yrange[2]+60)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## INTERPOLATE THE SURFACE BY INVERSE DISTANCE WEIGHTING
xx<-idw(formula=ElevationBottom ~ 1,
locations=vals_utm, newdata=grd)
## SAVE THE OUTPUT OF THE INTERPOLATION AS A DATA.FRAME
xxoutput=as.data.frame(xx)[,-4]# DROP VARIANCE COLUMN
names(xxoutput)[1:3]<-c("long","lat","depth")
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
## PLOT THE INTERPOLATED GRID
plot(xxoutput["depth"],zlim=c(-3,0))
points(vals_utm, col='white', type='l') # PUT DOWN TRACK
xxoutput
View(xxoutput)
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
## PLOT THE INTERPOLATED GRID
plot(xxoutput["depth"],zlim=c(-3,0))
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
## PLOT THE INTERPOLATED GRID
plot(xxoutput["depth"],zlim=c(-3,0))
points(vals_utm, col='white', type='l') # PUT DOWN TRACK
## INTERPOLATE THE SURFACE BY INVERSE DISTANCE WEIGHTING
xx<-idw(formula=ElevationBottom ~ 1,
locations=vals_utm, newdata=grd)
## SAVE THE OUTPUT OF THE INTERPOLATION AS A DATA.FRAME
xxoutput=as.data.frame(xx)[,-4]# DROP VARIANCE COLUMN
names(xxoutput)[1:3]<-c("long","lat","depth")
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
write.csv(xxoutput)
write.csv(xxoutput, "_dat/Bathymetry/InterpolatedDepths.csv")
## Usually no need to set a
#setwd("C:/Users/Victoria Starnes/Documents/Bluff Lake DO site selection")
setwd("C:/Users/Victoria Starnes/Documents/GitHub/Bluff-Lake-Project/_analysis/DO-Sampling") # SET WORKING DIRECTORY TO THE FOLDER ABOVE THIS ONE
## Usually no need to set a
#setwd("C:/Users/Victoria Starnes/Documents/Bluff Lake DO site selection")
setwd("C:/Users/Victoria Starnes/Documents/GitHub/Bluff-Lake-Project/_analysis/DO-Sampling") # SET WORKING DIRECTORY TO THE FOLDER ABOVE THIS ONE
## PULL KML DATA IN
kml.text <- readLines("_dat/Untitled Polygon.kml")
kml.text
## Usually no need to set a
#setwd("C:/Users/Victoria Starnes/Documents/Bluff Lake DO site selection")
setwd("C:/Users/Victoria Starnes/Documents/GitHub/Bluff-Lake-Project/_analysis/DO-Sampling") # SET WORKING DIRECTORY TO THE FOLDER ABOVE THIS ONE
## PULL KML DATA IN
kml.text <- readLines("_dat/Untitled Polygon.kml")
#change seccond number based on coordinates in kml file (kml.text[51:?])
coords <- data.frame(kml.text[41])
coords <- data.frame(do.call('rbind', strsplit(as.character(coords$kml.text.51.115.), ',', fixed = TRUE)))
str(coords)
#change seccond number based on coordinates in kml file (kml.text[51:?])
coords <- data.frame(kml.text[51:115])
coords <- data.frame(do.call('rbind', strsplit(as.character(coords$kml.text.51.115.), ',', fixed = TRUE)))
str(coords)
## Usually no need to set a
#setwd("C:/Users/Victoria Starnes/Documents/Bluff Lake DO site selection")
setwd("C:/Users/Victoria Starnes/Documents/GitHub/Bluff-Lake-Project/_analysis/DO-Sampling") # SET WORKING DIRECTORY TO THE FOLDER ABOVE THIS ONE
## PULL KML DATA IN
kml.text <- readLines("_dat/Untitled Polygon.kml")
kml.text
#change seccond number based on coordinates in kml file (kml.text[51:?])
coords <- data.frame(kml.text[51:115])
coords <- data.frame(do.call('rbind', strsplit(as.character(coords$kml.text.51.115.), ',', fixed = TRUE)))
str(coords)
coords$X1 <- as.numeric(as.character(coords$X1))
coords$X2 <- as.numeric(as.character(coords$X2))
coords$X3 <- as.numeric(as.character(coords$X3))
colnames(coords) <- c('x','y','z')
str(coords)
## PULL KML DATA IN
kml.text <- readLines("_dat/Bluff Lake Sample Area.kml")
#change seccond number based on coordinates in kml file (kml.text[51:?])
coords <- data.frame(kml.text[51:115])
kml.text
## PULL KML DATA IN
kml.text <- readLines("_dat/Untitled Polygon.kml")
kml.text
library(gstat)
library(sp)
setwd("C:/Users/Victoria Starnes/Documents/GitHub/Bluff-Lake-Project/_analysis/Depth-Mapping")
## READ IN COORINDATES AND DEPTHS
vals <- read.csv("_dat/Bathymetry/CombinedCorrected.csv")
## LOOK AT ELEVATION TRACK
plot(vals$ElevationBottom,ylim=c(-4,0));abline(h=0)
## ASSIGN LONGITUED AND LATITUDE AS X AND Y
## COORINDATES
coordinates(vals) = ~Longitude+Latitude
proj4string(vals) <- CRS("+proj=longlat +datum=WGS84")
## PROJECT TO UTM
vals_utm<- spTransform(vals, CRS("+proj=utm +zone=16 ellps=WGS84"))
write.csv(vals_utm, "depth_vals_utm.csv")
## PLOT THE COORDINATES
plot(vals_utm,axes=TRUE)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-60, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-100, yrange[2]+100)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-60, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-60, yrange[2]+150)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-60, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-60, yrange[2]+200)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-60, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-60, yrange[2]+300)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-60, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-60, yrange[2]+350)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## INTERPOLATE THE SURFACE BY INVERSE DISTANCE WEIGHTING
xx<-idw(formula=ElevationBottom ~ 1,
locations=vals_utm, newdata=grd)
## SAVE THE OUTPUT OF THE INTERPOLATION AS A DATA.FRAME
xxoutput=as.data.frame(xx)[,-4]# DROP VARIANCE COLUMN
names(xxoutput)[1:3]<-c("long","lat","depth")
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
write.csv(xxoutput, "_dat/Bathymetry/InterpolatedDepths.csv")
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-60, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-60, yrange[2]+450)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## INTERPOLATE THE SURFACE BY INVERSE DISTANCE WEIGHTING
xx<-idw(formula=ElevationBottom ~ 1,
locations=vals_utm, newdata=grd)
## SAVE THE OUTPUT OF THE INTERPOLATION AS A DATA.FRAME
xxoutput=as.data.frame(xx)[,-4]# DROP VARIANCE COLUMN
names(xxoutput)[1:3]<-c("long","lat","depth")
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
write.csv(xxoutput, "_dat/Bathymetry/InterpolatedDepths.csv")
## GET THE RANGE FOR X AND Y
xrange <- range(vals_utm@coords[,1])
xrange <- c(xrange[1]-70, xrange[2]+60)
yrange <- range(vals_utm@coords[,2])
yrange <- c(yrange[1]-60, yrange[2]+500)
## MAKE A GRID TO INTERPOLATE 15X15 METER GRID
grd <- expand.grid(x=seq(from=xrange[1],
to=xrange[2], by=15),
y=seq(from=yrange[1], to=yrange[2], by=15))
## CONVERT THE GRID TO A SPATIAL PIXEL CLASS
coordinates(grd) <- ~ x+y
gridded(grd) <- TRUE
proj4string(grd) <-CRS("+proj=utm +zone=16 ellps=WGS84")
## PLOT THE GRID AND THE DEPTH COORDINATES
plot(grd, cex=1.5)
points(vals_utm, pch=1, col='red', cex=1)
## INTERPOLATE THE SURFACE BY INVERSE DISTANCE WEIGHTING
xx<-idw(formula=ElevationBottom ~ 1,
locations=vals_utm, newdata=grd)
## SAVE THE OUTPUT OF THE INTERPOLATION AS A DATA.FRAME
xxoutput=as.data.frame(xx)[,-4]# DROP VARIANCE COLUMN
names(xxoutput)[1:3]<-c("long","lat","depth")
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
write.csv(xxoutput, "_dat/Bathymetry/InterpolatedDepths.csv")
## ASSIGN COORDINATES TO THE INTERPOLOATIONS AND SPATIAL GRID
coordinates(xxoutput) = ~long+lat
gridded(xxoutput)<-TRUE
write.csv(xxoutput, "_dat/Bathymetry/InterpolatedDepths.csv")
